{"version":3,"sources":["components/NumberInput/NumberInput.tsx","components/RestartConfig/RestartConfig.tsx","components/Cell/Cell.tsx","components/Board/BoardHelpers.ts","components/Board/Board.tsx","components/StickyButton/StickyButton.tsx","components/Stats/Stats.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["NumberInput","name","label","value","onChange","min","max","enabled","Boolean","className","type","disabled","defaultProps","initConfig","Object","freeze","width","height","mines","RestartConfig","restart","useState","config","setConfig","input","currentTarget","parseInt","newConfig","maxMines","Math","onSubmit","event","preventDefault","Cell","cell","xray","onClick","onMouseDown","onMouseUp","flagged","pressed","pressedClass","symbol","neighbors","board","cellFn","row","forEach","deltaRow","deltaCell","neighbor","initBoard","Array","fill","map","c","floor","random","setCell","newValue","newBoard","Board","restartFlag","flags","setFlags","setAlert","gameState","setGameState","setBoard","coordinateKey","useEffect","pressCell","coordinate","start","copyBoard","queue","length","shift","neighborCoordinate","push","floodEmptyCells","renderCell","key","shiftKey","flagsNew","boardNew","cellFlaggedOk","every","allMinesFlagged","toggleFlag","rowIndex","_","StickyButton","setPressed","Stats","setXray","alert","flagsRemaining","setRestartFlag","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1a9c4b0.chunk.js","sourcesContent":["// A \"Seven segment\" number input, either with onChange callback or disabled.\n\nimport React from 'react';\n\nimport './NumberInput.scss';\n\ntype Props = {\n  name: string;\n  label: string;\n  value: number;\n  onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n  min: number;\n  max: number;\n};\nfunction NumberInput({ name, label, value, onChange, min, max }: Props) {\n  // Disable the input when there's no onChange callback.\n  const enabled = Boolean(onChange);\n\n  return (\n    <label className=\"number-input\">\n      {label}\n      <input\n        name={name}\n        type=\"number\"\n        value={value}\n        onChange={onChange}\n        min={min}\n        max={max}\n        disabled={!enabled}\n      />\n    </label>\n  );\n}\n\nNumberInput.defaultProps = {\n  name: null,\n  onChange: null,\n  min: null,\n  max: null,\n};\n\nexport default NumberInput;\n","// Handles the restart game form (Width, Height, Mines and restart button).\n\nimport React, { useState } from 'react';\nimport NumberInput from '../NumberInput/NumberInput';\n\nimport './RestartConfig.scss';\n\n// Board boundaries\nconst MIN_SIZE = 1;\nconst MAX_SIZE = 300;\n\n// Default config\nexport type Config = {\n  width: number;\n  height: number;\n  mines: number;\n};\n\nexport const initConfig: Config = Object.freeze({\n  width: 10,\n  height: 10,\n  mines: 15,\n});\n\ntype Props = {\n  restart(config: Config): void;\n};\n\nexport default function RestartConfig({ restart }: Props) {\n  const [config, setConfig] = useState(initConfig);\n\n  const onChange = ({ currentTarget }: React.FormEvent<HTMLInputElement>) => {\n    const input = currentTarget;\n\n    // Ignore empty string.\n    if (input.value === '') return;\n\n    // Ignore the new value when it's out of bounds.\n    if (input.value < input.min || input.value > input.max) return;\n\n    const value = parseInt(input.value);\n    const newConfig: Config = { ...config };\n    // FIXME: How to assign to newConfig[input.name] in a typesafe way without listing all options?\n    switch (input.name) {\n      case 'width':\n        newConfig.width = value;\n        break;\n      case 'height':\n        newConfig.height = value;\n        break;\n      case 'mines':\n        newConfig.mines = value;\n        break;\n    }\n    setConfig(newConfig);\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    restart(config);\n  };\n\n  // Require at least one cell without a mine, and don't allow more than 999,\n  // so the number input design doesn't break.\n  const maxMines = Math.min(config.width * config.height - 1, 999);\n\n  return (\n    <form onSubmit={onSubmit} className=\"restart-config\">\n      <NumberInput\n        name=\"width\"\n        label=\"Width\"\n        value={config.width}\n        onChange={onChange}\n        min={MIN_SIZE}\n        max={MAX_SIZE}\n      />\n\n      <NumberInput\n        name=\"height\"\n        label=\"Height\"\n        value={config.height}\n        onChange={onChange}\n        min={MIN_SIZE}\n        max={MAX_SIZE}\n      />\n\n      <NumberInput\n        name=\"mines\"\n        label=\"Mines\"\n        value={config.mines}\n        onChange={onChange}\n        min={1}\n        max={maxMines}\n      />\n\n      <label>\n        Restart\n        <button type=\"submit\" className=\"restart embossed\">\n          <span className=\"smiley\" />\n        </button>\n      </label>\n    </form>\n  );\n}\n","import React from 'react';\n\nimport './Cell.scss';\n\nexport type TCell = {\n  flagged: boolean;\n  value: number;\n  pressed: boolean;\n};\n\nexport const CELL_EMPTY = 0;\nexport const CELL_MINE = -1;\n\ntype Props = {\n  cell: TCell;\n  xray: boolean;\n  onClick: (event: React.MouseEvent) => void;\n  onMouseDown: (event: React.MouseEvent) => void;\n  onMouseUp: (event: React.MouseEvent) => void;\n};\nfunction Cell({ cell, xray, onClick, onMouseDown, onMouseUp }: Props) {\n  const { flagged, value, pressed } = cell;\n\n  const symbol = () => {\n    if (flagged) return <span className=\"flag\">f</span>;\n\n    if (!xray && !pressed) return <></>;\n\n    switch (value) {\n      case CELL_MINE:\n        return <span className=\"mine\">X</span>;\n\n      case CELL_EMPTY:\n        return <></>;\n\n      default:\n        return <span className={`color-${value}`}>{value}</span>;\n    }\n  };\n\n  const pressedClass = () => {\n    // Returning undefined instead of empty string to avoid printing class=\"\"\n    // on all cells.\n    if (!pressed) return undefined;\n    if (value === CELL_MINE) return 'flat mine';\n    return 'flat';\n  };\n\n  return (\n    <button\n      className={pressedClass()}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n    >\n      {symbol()}\n    </button>\n  );\n}\n\nexport default Cell;\n","import { CELL_EMPTY, CELL_MINE, TCell as Cell } from '../Cell/Cell';\n\nexport type Coordinate = { row: number; cell: number };\n\ntype Board = Cell[][];\n\n// Run a callback on non-mine neighbors of a cell.\nfunction neighbors(\n  board: Board,\n  { row, cell }: Coordinate,\n  cellFn: (cell: Cell, coordinate: Coordinate) => void\n) {\n  [-1, 0, 1].forEach((deltaRow) => {\n    [-1, 0, 1].forEach((deltaCell) => {\n      if (!deltaRow && !deltaCell) return;\n\n      const neighbor = { row: row + deltaRow, cell: cell + deltaCell };\n\n      // Ignore coordinates out of bounds.\n      if (!board[neighbor.row] || !board[neighbor.row][neighbor.cell]) return;\n\n      if (board[neighbor.row][neighbor.cell].value !== CELL_MINE) {\n        cellFn(board[neighbor.row][neighbor.cell], neighbor);\n      }\n    });\n  });\n}\n\n// Create new board with random mines.\nexport function initBoard(width: number, height: number, mines: number): Board {\n  const board = Array(height)\n    .fill(null)\n    .map(() =>\n      Array(width)\n        .fill(null)\n        .map(() => ({\n          pressed: false,\n          value: 0,\n          flagged: false,\n        }))\n    );\n\n  // Plant mines.\n  [...Array(mines)].forEach(() => {\n    // Keep creating random coordinates until an empty spot is found, then add\n    // a mine there.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const c = {\n        row: Math.floor(Math.random() * height),\n        cell: Math.floor(Math.random() * width),\n      };\n\n      if (board[c.row][c.cell].value !== CELL_MINE) {\n        board[c.row][c.cell].value = CELL_MINE;\n\n        neighbors(board, c, (cell) => {\n          // eslint-disable-next-line no-param-reassign\n          cell.value += 1;\n        });\n        break;\n      }\n    }\n  });\n  return board;\n}\n\n// Return a copy of the board, with one cell changed.\nexport function setCell(\n  board: Board,\n  { row, cell }: Coordinate,\n  pressed: boolean,\n  value: number | null,\n  flagged: boolean\n): Board {\n  const newValue = value === null ? board[row][cell].value : value;\n  const newBoard = [...board];\n  newBoard[row] = [...board[row]];\n  newBoard[row][cell] = { pressed, value: newValue, flagged };\n\n  return newBoard;\n}\n\n// Create a copy of the board.\nfunction copyBoard(board: Board): Board {\n  return board.map((row) =>\n    row.map((cell) => ({\n      pressed: cell.pressed,\n      value: cell.value,\n      flagged: cell.flagged,\n    }))\n  );\n}\n\n// Revealing the neighbors of empty cells.\nexport function floodEmptyCells(board: Board, start: Coordinate): Board {\n  const newBoard = copyBoard(board);\n\n  // For each empty cell, adding all of its empty neighbors to a queue, and\n  // repeating until the queue is empty.\n  // Initialize the queue with the empty cell clicked.\n  const queue: Coordinate[] = [start];\n  while (queue.length) {\n    const coordinate = queue.shift();\n    // This condition is just to prevent a \"possibly undefined\" warning. The\n    // queue is only shifted when not empty.\n    if (!coordinate) break;\n\n    if (newBoard[coordinate.row][coordinate.cell].pressed) continue;\n\n    newBoard[coordinate.row][coordinate.cell].pressed = true;\n\n    neighbors(newBoard, coordinate, (neighbor, neighborCoordinate) => {\n      if (neighbor.flagged) return;\n\n      // Reveal cell neighbors.\n      // eslint-disable-next-line no-param-reassign\n      if (neighbor.value > CELL_EMPTY) neighbor.pressed = true;\n\n      // Add empty cells to the flood queue.\n      if (neighbor.value === CELL_EMPTY) queue.push(neighborCoordinate);\n    });\n  }\n  return newBoard;\n}\n\n// Checks that each cell is either not a mine or a flagged mine.\nexport function allMinesFlagged(board: Board): boolean {\n  const cellFlaggedOk = ({ flagged, value }: Cell) =>\n    value !== CELL_MINE || (value === CELL_MINE && flagged);\n\n  return board.every((row) => row.every(cellFlaggedOk));\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Cell, { CELL_EMPTY, CELL_MINE, TCell } from '../Cell/Cell';\nimport {\n  initBoard,\n  allMinesFlagged,\n  setCell,\n  floodEmptyCells,\n  Coordinate,\n} from './BoardHelpers';\n\nimport './Board.scss';\n\nexport type GameState = 'ongoing' | 'clicking' | 'won' | 'lost';\n\ntype Props = {\n  restartFlag: boolean;\n  width: number;\n  height: number;\n  mines: number;\n  xray: boolean;\n  flags: number;\n  setFlags: (flags: number) => void;\n  setAlert: (alert: string) => void;\n  gameState: GameState;\n  setGameState: (state: GameState) => void;\n};\n\nexport default function Board({\n  restartFlag,\n  width,\n  height,\n  mines,\n  xray,\n  flags,\n  setFlags,\n  setAlert,\n  gameState,\n  setGameState,\n}: Props) {\n  const [board, setBoard] = useState(initBoard(width, height, mines));\n\n  const coordinateKey = ({ row, cell }: Coordinate) => `${row}_${cell}`;\n\n  // Rebuild the board when the config changes, or when new game is started\n  // (restart flag flips).\n  useEffect(() => {\n    setBoard(initBoard(width, height, mines));\n  }, [restartFlag, width, height, mines]);\n\n  const pressCell = (coordinate: Coordinate) => {\n    // Ignore press on flagged and pressed cells.\n    const { flagged, pressed, value } = board[coordinate.row][coordinate.cell];\n    if (flagged || pressed) return;\n\n    switch (value) {\n      case CELL_MINE:\n        setGameState('lost');\n        setBoard(setCell(board, coordinate, true, null, false));\n        setAlert('game over');\n        break;\n\n      case CELL_EMPTY:\n        // \"Flood fill\" empty cells.\n        setBoard(floodEmptyCells(board, coordinate));\n        break;\n\n      default:\n        // Pressed a mine neighbour. Mark it as pressed.\n        setBoard(setCell(board, coordinate, true, null, false));\n    }\n  };\n\n  const toggleFlag = (coordinate: Coordinate) => {\n    const { flagged, pressed } = board[coordinate.row][coordinate.cell];\n\n    // Don't allow flagging pressed cells.\n    if (pressed) return;\n    // Don't allow adding more flags than mines.\n    if (!flagged && mines <= flags) {\n      setAlert('no more flags');\n      return;\n    }\n    // Clear the \"no flags\" alert, update the flags counter and toggle the flag\n    // on the board.\n    setAlert('');\n    const flagsNew = flags + (flagged ? -1 : 1);\n    setFlags(flagsNew);\n    const boardNew = setCell(board, coordinate, false, null, !flagged);\n    setBoard(boardNew);\n    // Check if all mines are flagged correctly when all flags are used.\n    if (flagsNew === mines && allMinesFlagged(boardNew)) {\n      setGameState('won');\n      setAlert('game won');\n    }\n  };\n\n  const renderCell = (coordinate: Coordinate) => {\n    const cell = board[coordinate.row][coordinate.cell];\n\n    const onClick = (event: React.MouseEvent) => {\n      if (gameState !== 'ongoing') return;\n\n      if (event.shiftKey) toggleFlag(coordinate);\n      else pressCell(coordinate);\n    };\n\n    const onMouseDown = (event: React.MouseEvent) => {\n      if (gameState !== 'ongoing' || event.shiftKey) return;\n      if (cell.pressed || cell.flagged) return;\n      setGameState('clicking');\n    };\n\n    const onMouseUp = () => {\n      if (gameState !== 'clicking') return;\n      setGameState('ongoing');\n    };\n\n    return (\n      <Cell\n        key={coordinateKey(coordinate)}\n        cell={cell}\n        xray={xray}\n        onClick={onClick}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n      />\n    );\n  };\n\n  const renderRow = (row: TCell[], rowIndex: number) => (\n    <div key={rowIndex} className=\"row\">\n      {row.map((_, cell) => renderCell({ row: rowIndex, cell }))}\n    </div>\n  );\n\n  return <div className=\"board debossed\">{board.map(renderRow)}</div>;\n}\n","// A toggleable button.\n\nimport React from 'react';\n\nimport './StickyButton.scss';\n\ntype Props = {\n  label: string;\n  pressed: boolean;\n  setPressed: (pressed: boolean) => void;\n};\nfunction StickyButton({ label, pressed, setPressed }: Props) {\n  const pressedClass = pressed ? 'debossed' : 'embossed';\n\n  const onClick = () => setPressed(!pressed);\n\n  return (\n    <button className={`sticky-button ${pressedClass}`} onClick={onClick}>\n      {label}\n    </button>\n  );\n}\n\nexport default StickyButton;\n","// Handles status messages and configs that can be changed without restarting.\n\nimport React from 'react';\n\nimport NumberInput from '../NumberInput/NumberInput';\nimport StickyButton from '../StickyButton/StickyButton';\n\nimport './Stats.scss';\n\ntype Props = {\n  flags: number;\n  mines: number;\n  xray: boolean;\n  setXray: (xray: boolean) => void;\n  alert: string;\n};\nexport default function Stats({ flags, mines, xray, setXray, alert }: Props) {\n  const flagsRemaining = mines - flags;\n\n  return (\n    <section className=\"stats\">\n      <NumberInput label=\"Flags\" value={flagsRemaining} />\n\n      <StickyButton label=\"X-ray\" pressed={xray} setPressed={setXray} />\n\n      <p className=\"alert\">{alert}</p>\n    </section>\n  );\n}\n","// App renders the main game markup, and manages the global states.\n\nimport React, { useState } from 'react';\nimport RestartConfig, {\n  Config,\n  initConfig,\n} from '../RestartConfig/RestartConfig';\nimport Board, { GameState } from '../Board/Board';\nimport Stats from '../Stats/Stats';\n\nimport './App.scss';\n\nexport default function () {\n  // Board() initiates the board when this flag changes. There's no meaning to\n  // its value.\n  const [restartFlag, setRestartFlag] = useState(false);\n\n  // The config state is held separately inside RestartConfig(), to allow\n  // adjusting the inputs and only change the board after restart.\n  const [config, setConfig] = useState(initConfig);\n\n  // Count flags currently in use.\n  const [flags, setFlags] = useState(0);\n\n  // Alert for allowing the Board to display text messages on Stats().\n  const [alert, setAlert] = useState('');\n\n  // Track the game state (won | lost | ongoing), for the smiley on the\n  // start button, and for locking the cells when game is over.\n  const [gameState, setGameState] = useState<GameState>('ongoing');\n\n  // For the \"Superman mode\".\n  const [xray, setXray] = useState(false);\n\n  // Start a new game: Change restartFlag and reset other states.\n  const restart = (newConfig: Config) => {\n    setRestartFlag(!restartFlag);\n    setConfig(newConfig);\n    setFlags(0);\n    setAlert('');\n    setGameState('ongoing');\n  };\n\n  return (\n    <section className={`app embossed ${gameState}`}>\n      <header>\n        <div className=\"debossed settings\">\n          <RestartConfig restart={restart} />\n          <Stats\n            flags={flags}\n            mines={config.mines}\n            xray={xray}\n            setXray={setXray}\n            alert={alert}\n          />\n        </div>\n      </header>\n\n      <Board\n        restartFlag={restartFlag}\n        width={config.width}\n        height={config.height}\n        mines={config.mines}\n        xray={xray}\n        flags={flags}\n        setFlags={setFlags}\n        setAlert={setAlert}\n        gameState={gameState}\n        setGameState={setGameState}\n      />\n    </section>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n//\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready\n//       .then((registration) => {\n//         registration.unregister();\n//       })\n//       .catch((error) => {\n//         console.error(error.message);\n//       });\n//   }\n// }\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App/App';\nimport { register } from './serviceWorker';\n\nimport 'reset-css';\nimport './fonts/fonts.scss';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nregister();\n"],"sourceRoot":""}