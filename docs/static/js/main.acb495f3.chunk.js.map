{"version":3,"sources":["components/NumberInput/NumberInput.jsx","components/RestartConfig/RestartConfig.jsx","components/Cell/Cell.jsx","components/Board/BoardHelpers.js","components/Board/Board.jsx","components/StickyButton/StickyButton.jsx","components/Stats/Stats.jsx","components/App/App.jsx","index.jsx"],"names":["NumberInput","name","label","value","onChange","min","max","enabled","Boolean","className","type","disabled","defaultProps","initConfig","Object","freeze","width","height","mines","RestartConfig","restart","useState","config","setConfig","input","currentTarget","parseInt","newConfig","maxMines","Math","onSubmit","event","preventDefault","Cell","cell","xray","onClick","flagged","pressed","symbol","neigbors","board","i","j","cellFn","forEach","deltaI","deltaJ","neighborI","neighborJ","initBoard","arrayFillMap","length","map","Array","fill","floor","random","setCell","newValue","newBoard","GameState","ongoing","won","lost","Board","restartFlag","flags","setFlags","setAlert","gameState","setGameState","setBoard","coordinateKey","useEffect","pressCell","initI","initJ","row","copyBoard","queue","shift","neighbor","push","floodEmptyCells","renderCell","key","shiftKey","flagsNew","boardNew","cellFlaggedOk","every","allMinesFlagged","toggleFlag","_","StickyButton","setPressed","pressedClass","Stats","setXray","alert","flagsRemaining","setRestartFlag","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acb495f3.chunk.js","sourcesContent":["// A \"Seven segment\" number input, either with onChange callback or disabled.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NumberInput.scss';\n\nfunction NumberInput({ name, label, value, onChange, min, max }) {\n  // Disable the input when there's no onChange.\n  const enabled = Boolean(onChange);\n\n  return (\n    <label className=\"number-input\">\n      {label}\n      <input\n        name={name}\n        type=\"number\"\n        value={value}\n        onChange={onChange}\n        min={min}\n        max={max}\n        disabled={!enabled}\n      />\n    </label>\n  );\n}\n\nNumberInput.propTypes = {\n  name: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func,\n  min: PropTypes.number,\n  max: PropTypes.number,\n};\n\nNumberInput.defaultProps = {\n  name: null,\n  onChange: null,\n  min: null,\n  max: null,\n};\n\nexport default NumberInput;\n","// Handles the restart game form (Width, Height, Mines and restart button).\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport NumberInput from '../NumberInput/NumberInput';\n\nimport './RestartConfig.scss';\n\n// Board boundaries\nconst MIN_SIZE = 1;\nconst MAX_SIZE = 300;\n\n// Default config\nexport const initConfig = Object.freeze({\n  width: 10,\n  height: 10,\n  mines: 15,\n});\n\nexport default function RestartConfig({ restart }) {\n  const [config, setConfig] = useState(initConfig);\n\n  const onChange = ({ currentTarget: input }) => {\n    // Ignore empty string.\n    if (input.value === '') return;\n\n    const value = parseInt(input.value);\n    // Ignore the new value when it's out of bounds.\n    if (value < input.min || value > input.max) return;\n\n    const newConfig = { ...config };\n    newConfig[input.name] = value;\n    setConfig(newConfig);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    restart(config);\n  };\n\n  // Require at least one cell without a mine, and don't allow more than 999,\n  // so the number input design doesn't break.\n  const maxMines = Math.min(config.width * config.height - 1, 999);\n\n  return (\n    <form onSubmit={onSubmit} className=\"restart-config\">\n      <NumberInput\n        name=\"width\"\n        label=\"Width\"\n        value={config.width}\n        onChange={onChange}\n        min={MIN_SIZE}\n        max={MAX_SIZE}\n      />\n\n      <NumberInput\n        name=\"height\"\n        label=\"Height\"\n        value={config.height}\n        onChange={onChange}\n        min={MIN_SIZE}\n        max={MAX_SIZE}\n      />\n\n      <NumberInput\n        name=\"mines\"\n        label=\"Mines\"\n        value={config.mines}\n        onChange={onChange}\n        min={1}\n        max={maxMines}\n      />\n\n      <label>\n        Restart\n        <button type=\"submit\" className=\"restart embossed\">\n          <span className=\"smiley\" />\n        </button>\n      </label>\n    </form>\n  );\n}\n\nRestartConfig.propTypes = {\n  restart: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Cell.scss';\n\nexport const CELL_EMPTY = 0;\nexport const CELL_MINE = -1;\n\nfunction Cell({ cell, xray, onClick }) {\n  const { flagged, value, pressed } = cell;\n\n  const symbol = () => {\n    if (flagged) return <span className=\"flag\">f</span>;\n\n    if (!xray && !pressed) return <></>;\n\n    switch (value) {\n      case CELL_MINE:\n        return <span className=\"mine\">X</span>;\n\n      case CELL_EMPTY:\n        return <></>;\n\n      default:\n        return <span className={`color-${value}`}>{value}</span>;\n    }\n  };\n\n  const pressedClass = () => {\n    if (!pressed) return null;\n    if (value === CELL_MINE) return 'flat mine';\n    return 'flat';\n  };\n\n  return (\n    <button className={pressedClass()} onClick={onClick}>\n      {symbol()}\n    </button>\n  );\n}\n\nCell.propTypes = {\n  cell: PropTypes.shape({\n    pressed: PropTypes.bool.isRequired,\n    value: PropTypes.number.isRequired,\n    flagged: PropTypes.bool.isRequired,\n  }).isRequired,\n  xray: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Cell;\n","import { CELL_EMPTY, CELL_MINE } from '../Cell/Cell';\n\n// Run a callback on non-mine neighbors of a cell.\nfunction neigbors(board, i, j, cellFn) {\n  [-1, 0, 1].forEach((deltaI) => {\n    [-1, 0, 1].forEach((deltaJ) => {\n      if (!deltaI && !deltaJ) return;\n\n      const neighborI = i + deltaI;\n      const neighborJ = j + deltaJ;\n      // Ignore coordinates out of bounds.\n      if (!board[neighborI] || !board[neighborI][neighborJ]) return;\n\n      if (board[neighborI][neighborJ].value !== CELL_MINE) {\n        cellFn(board[neighborI][neighborJ], neighborI, neighborJ);\n      }\n    });\n  });\n}\n\n// Create new board with random mines.\nexport function initBoard(width, height, mines) {\n  const arrayFillMap = (length, map) => Array(length).fill().map(map);\n\n  const board = arrayFillMap(height, () =>\n    arrayFillMap(width, () => ({\n      pressed: false,\n      value: 0,\n      flagged: false,\n    })),\n  );\n\n  // Plant mines.\n  [...Array(mines)].forEach(() => {\n    // Keep creating random coordinates until an empty spot is found, then add\n    // a mine there.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const i = Math.floor(Math.random() * height);\n      const j = Math.floor(Math.random() * width);\n      if (board[i][j].value !== CELL_MINE) {\n        board[i][j].value = CELL_MINE;\n\n        neigbors(board, i, j, (cell) => {\n          // eslint-disable-next-line no-param-reassign\n          cell.value += 1;\n        });\n        break;\n      }\n    }\n  });\n  return board;\n}\n\n// Return a copy of the board, with one cell changed.\nexport function setCell(board, i, j, pressed, value, flagged) {\n  const newValue = value === null ? board[i][j].value : value;\n  const newBoard = [...board];\n  newBoard[i] = [...board[i]];\n  newBoard[i][j] = { pressed, value: newValue, flagged };\n\n  return newBoard;\n}\n\n// Create a copy of the board.\nfunction copyBoard(board) {\n  return board.map((row) =>\n    row.map((cell) => ({\n      pressed: cell.pressed,\n      value: cell.value,\n      flagged: cell.flagged,\n    })),\n  );\n}\n\n// Revealing the neighbors of empty cells.\nexport function floodEmptyCells(board, initI, initJ) {\n  const newBoard = copyBoard(board);\n\n  // For each empty cell, adding all of its empty neighbors to a queue, and\n  // repeating until the queue is empty.\n  // Initialize the queue with the empty cell clicked.\n  const queue = [[initI, initJ]];\n  while (queue.length) {\n    const [i, j] = queue.shift();\n\n    if (newBoard[i][j].pressed) {\n      continue;\n    }\n\n    newBoard[i][j].pressed = true;\n\n    neigbors(newBoard, i, j, (neighbor, neighborI, neighborJ) => {\n      if (neighbor.flagged) return;\n\n      // Reveal cell neighbors.\n      // eslint-disable-next-line no-param-reassign\n      if (neighbor.value > CELL_EMPTY) neighbor.pressed = true;\n\n      // Add empty cells to the flood queue.\n      if (neighbor.value === CELL_EMPTY) queue.push([neighborI, neighborJ]);\n    });\n  }\n  return newBoard;\n}\n\n// Checks that each cell is either not a mine or a flagged mine.\nexport function allMinesFlagged(board) {\n  const cellFlaggedOk = ({ flagged, value }) =>\n    value !== CELL_MINE || (value === CELL_MINE && flagged);\n\n  return board.every((row) => row.every(cellFlaggedOk));\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Cell, { CELL_EMPTY, CELL_MINE } from '../Cell/Cell';\nimport {\n  initBoard,\n  allMinesFlagged,\n  setCell,\n  floodEmptyCells,\n} from './BoardHelpers';\n\nimport './Board.scss';\n\nexport const GameState = Object.freeze({\n  ongoing: 'ongoing',\n  won: 'won',\n  lost: 'lost',\n});\n\nexport default function Board({\n  restartFlag,\n  width,\n  height,\n  mines,\n  xray,\n  flags,\n  setFlags,\n  setAlert,\n  gameState,\n  setGameState,\n}) {\n  const [board, setBoard] = useState(initBoard(width, height, mines));\n\n  const coordinateKey = (i, j) => `${i}_${j}`;\n\n  // Rebuild the board when the config changes, or when new game is started\n  // (restart flag flips).\n  useEffect(() => {\n    setBoard(initBoard(width, height, mines));\n  }, [restartFlag, width, height, mines]);\n\n  const pressCell = (i, j) => {\n    // Ignore press on flagged and pressed cells.\n    const { flagged, pressed, value } = board[i][j];\n    if (flagged || pressed) return;\n\n    switch (value) {\n      case CELL_MINE:\n        setGameState(GameState.lost);\n        setBoard(setCell(board, i, j, true, null, false));\n        setAlert('game over');\n        break;\n\n      case CELL_EMPTY:\n        // \"Flood fill\" empty cells.\n        setBoard(floodEmptyCells(board, i, j));\n        break;\n\n      default:\n        // Pressed a mine neighbour. Mark it as pressed.\n        setBoard(setCell(board, i, j, true, null, false));\n    }\n  };\n\n  const toggleFlag = (i, j) => {\n    const { flagged, pressed } = board[i][j];\n\n    // Don't allow flagging pressed cells.\n    if (pressed) return;\n    // Don't allow adding more flags than mines.\n    if (!flagged && mines <= flags) {\n      setAlert('no more flags');\n      return;\n    }\n    // Clear the \"no flags\" alert, update the flags counter and toggle the flag\n    // on the board.\n    setAlert('');\n    const flagsNew = flags + (flagged ? -1 : 1);\n    setFlags(flagsNew);\n    const boardNew = setCell(board, i, j, false, null, !flagged);\n    setBoard(boardNew);\n    // Check if all mines are flagged correctly when all flags are used.\n    if (flagsNew === mines && allMinesFlagged(boardNew)) {\n      setGameState(GameState.won);\n      setAlert('game won');\n    }\n  };\n\n  const renderCell = (i, j) => {\n    const onClick = (event) => {\n      if (gameState !== GameState.ongoing) return;\n\n      if (event.shiftKey) {\n        toggleFlag(i, j);\n      } else {\n        pressCell(i, j);\n      }\n    };\n\n    return (\n      <Cell\n        key={coordinateKey(i, j)}\n        cell={board[i][j]}\n        xray={xray}\n        onClick={onClick}\n      />\n    );\n  };\n\n  const renderRow = (row, i) => (\n    <div key={i} className=\"row\">\n      {row.map((_, j) => renderCell(i, j))}\n    </div>\n  );\n\n  return <div className=\"board debossed\">{board.map(renderRow)}</div>;\n}\n\nBoard.propTypes = {\n  restartFlag: PropTypes.bool.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  mines: PropTypes.number.isRequired,\n  xray: PropTypes.bool.isRequired,\n  flags: PropTypes.number.isRequired,\n  setFlags: PropTypes.func.isRequired,\n  setAlert: PropTypes.func.isRequired,\n  gameState: PropTypes.string.isRequired,\n  setGameState: PropTypes.func.isRequired,\n};\n","// A toggleable button.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './StickyButton.scss';\n\nfunction StickyButton({ label, pressed, setPressed }) {\n  const pressedClass = pressed ? 'debossed' : 'embossed';\n\n  const onClick = () => setPressed(!pressed);\n\n  return (\n    <button className={`sticky-button ${pressedClass}`} onClick={onClick}>\n      {label}\n    </button>\n  );\n}\n\nStickyButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  pressed: PropTypes.bool.isRequired,\n  setPressed: PropTypes.func.isRequired,\n};\n\nexport default StickyButton;\n","// Handles status messages and configs that can be changed without restarting.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport NumberInput from '../NumberInput/NumberInput';\nimport StickyButton from '../StickyButton/StickyButton';\n\nimport './Stats.scss';\n\nexport default function Stats({ flags, mines, xray, setXray, alert }) {\n  const flagsRemaining = mines - flags;\n\n  return (\n    <section className=\"stats\">\n      <NumberInput label=\"Flags\" value={flagsRemaining} />\n\n      <StickyButton label=\"X-ray\" pressed={xray} setPressed={setXray} />\n\n      <p className=\"alert\">{alert}</p>\n    </section>\n  );\n}\n\nStats.propTypes = {\n  // Flags in use count\n  flags: PropTypes.number.isRequired,\n  // Mines count\n  mines: PropTypes.number.isRequired,\n  xray: PropTypes.bool.isRequired,\n  setXray: PropTypes.func.isRequired,\n  // Display message\n  alert: PropTypes.string.isRequired,\n};\n","// App renders the main game markup, and manages the global states.\n\nimport React, { useState } from 'react';\nimport RestartConfig, { initConfig } from '../RestartConfig/RestartConfig';\nimport Board, { GameState } from '../Board/Board';\nimport Stats from '../Stats/Stats';\n\nimport './App.scss';\n\nexport default function () {\n  // Board() initiates the board when this flag changes. There's no meaning to\n  // its value.\n  const [restartFlag, setRestartFlag] = useState(false);\n\n  // The config state is held separately inside RestartConfig(), to allow\n  // adjusting the inputs and only change the board after restart.\n  const [config, setConfig] = useState(initConfig);\n\n  // Count flags currently in use.\n  const [flags, setFlags] = useState(0);\n\n  // Alert for allowing the Board to display text messages on Stats().\n  const [alert, setAlert] = useState('');\n\n  // Track the game state (won | lost | ongoing), for the smiley on the\n  // start button, and for locking the cells when game is over.\n  const [gameState, setGameState] = useState(GameState.ongoing);\n\n  // For the \"Superman mode\".\n  const [xray, setXray] = useState(false);\n\n  // Start a new game: Change restartFlag and reset other states.\n  const restart = (newConfig) => {\n    setRestartFlag(!restartFlag);\n    setConfig(newConfig);\n    setFlags(0);\n    setAlert('');\n    setGameState(GameState.ongoing);\n  };\n\n  return (\n    <section className={`app embossed ${gameState}`}>\n      <header>\n        <div className=\"debossed settings\">\n          <RestartConfig restart={restart} />\n          <Stats\n            flags={flags}\n            mines={config.mines}\n            xray={xray}\n            setXray={setXray}\n            alert={alert}\n            gameState={gameState}\n          />\n        </div>\n      </header>\n\n      <Board\n        restartFlag={restartFlag}\n        width={config.width}\n        height={config.height}\n        mines={config.mines}\n        xray={xray}\n        flags={flags}\n        setFlags={setFlags}\n        setAlert={setAlert}\n        gameState={gameState}\n        setGameState={setGameState}\n      />\n    </section>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nimport 'reset-css';\nimport './fonts/fonts.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}